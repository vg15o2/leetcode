# 279. Perfect Squares

## Problem Statement

Given an integer `n`, return the least number of perfect square numbers that sum to `n`.

A **perfect square** is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares, while `3` and `11` are not.

### Examples

### Example 1:
**Input:**  
`n = 12`  
**Output:**  
`3`  
**Explanation:**  
`12 = 4 + 4 + 4`

### Example 2:
**Input:**  
`n = 13`  
**Output:**  
`2`  
**Explanation:**  
`13 = 4 + 9`

### Constraints:
- `1 <= n <= 10^4`

### Approach: DP (Bottom-Up)

### Complexity Analysis
- **Time Complexity:** \(O(n \cdot \sqrt{n})\)  
  - For each `i` from `1` to `n`, we iterate over all possible perfect squares `j^2 â‰¤ i`, leading to a complexity of \(O(n^{1.5})\).
- **Space Complexity:** \(O(n)\)  
  - We use a DP array of size `n + 1`.

### Code Implementation (C++)
```cpp
class Solution {
public:
    int numSquares(int n) {
        // Initialize dp vector with max value
        vector<int> dp(n + 1, INT_MAX);
        
        // Base case
        dp[0] = 0;
        
        // Iterate through all numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            // Try all perfect squares less than or equal to i
            for (int j = 1; j * j <= i; j++) {
                // Update minimum number of perfect squares needed
                dp[i] = min(dp[i], dp[i - j * j] + 1);
            }
        }
        
        return dp[n];
    }
};
```
### Code Implementation (Python)
```python
class Solution:
    def numSquares(self, n: int) -> int:
        # Initialize dp array with maximum possible value
        dp = [float('inf')] * (n + 1)
        
        # Base case: 0 requires 0 perfect squares
        dp[0] = 0
        
        # Iterate through all numbers from 1 to n
        for i in range(1, n + 1):
            # Try all perfect squares less than or equal to i
            j = 1
            while j * j <= i:
                # Update minimum number of perfect squares needed
                dp[i] = min(dp[i], dp[i - j * j] + 1)
                j += 1
        
        return dp[n]
```
